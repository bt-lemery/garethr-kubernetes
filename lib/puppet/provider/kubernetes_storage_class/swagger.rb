
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_storage_class).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
    
      
    
      
        metadata: instance.metadata.respond_to?(:to_hash) ? instance.metadata.to_hash : instance.metadata,
      
    
      
        provisioner: instance.provisioner.respond_to?(:to_hash) ? instance.provisioner.to_hash : instance.provisioner,
      
    
      
        parameters: instance.parameters.respond_to?(:to_hash) ? instance.parameters.to_hash : instance.parameters,
      
    
      
        reclaim_policy: instance.reclaimPolicy.respond_to?(:to_hash) ? instance.reclaimPolicy.to_hash : instance.reclaimPolicy,
      
    
      
        mount_options: instance.mountOptions.respond_to?(:to_hash) ? instance.mountOptions.to_hash : instance.mountOptions,
      
    
      
        allow_volume_expansion: instance.allowVolumeExpansion.respond_to?(:to_hash) ? instance.allowVolumeExpansion.to_hash : instance.allowVolumeExpansion,
      
    
      
        volume_binding_mode: instance.volumeBindingMode.respond_to?(:to_hash) ? instance.volumeBindingMode.to_hash : instance.volumeBindingMode,
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_storage_class #{name}")
    create_instance_of('storage_class', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('storage_class', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_storage_class #{name}")
    destroy_instance_of('storage_class', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('storage_class')
  end

  def build_params
    params = {
    
      
    
      
    
      
        metadata: resource[:metadata],
      
    
      
        provisioner: resource[:provisioner],
      
    
      
        parameters: resource[:parameters],
      
    
      
        reclaimPolicy: resource[:reclaim_policy],
      
    
      
        mountOptions: resource[:mount_options],
      
    
      
        allowVolumeExpansion: resource[:allow_volume_expansion],
      
    
      
        volumeBindingMode: resource[:volume_binding_mode],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
